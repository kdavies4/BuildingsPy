#!/usr/bin/env python

from scipy.integrate import trapz
from modelicares import SimRes

class Reader(SimRes):
    """Open the file *fname* and parse its content.

    :param fname: The name of the file.
    :param simulator: The file format. Currently, the only supported
                      value is ``dymola``. The argument is required to
                      allow adding other simulation output file formats
                      from Modelica or non-Modelica simulators.


    This class reads ``*.mat`` files that were generated by Dymola
    or OpenModelica.

    """

    def __init__(self, fname, simulator):

        if simulator != "dymola":
            raise ValueError('Argument "simulator" needs to be set to "dymola".')

        super(Reader, self).__init__(fname)
        self.fileName = fname
        # TODO: Consider using dir (directory) and fbase (base filename without
        # extension) from SimRes instead of fileName.  Then, this function could 
        # be eliminated (defer to SimRes.__init__).

    def varNames(self, pattern=None):
        '''
           :pattern: A regular expression that will be used to filter the variable names.

           Scan through all variable names and return the variables
           for which ``pattern``, as a regular expression, produces a match.
           If ``pattern`` is unspecified, all variable names are returned.

           This method searches the variable names using the **search** function
           from `Python's re module <http://docs.python.org/2/library/re.html>`_.

           See also http://docs.python.org/2/howto/regex.html#regex-howto.

           Usage: Type

              >>> import os
              >>> from buildingspy.io.outputfile import Reader
              >>> resultFile = os.path.join("buildingspy", "examples", "dymola", "PlotDemo.mat")
              >>> r=Reader(resultFile, "dymola")
              >>> # Return a list with all variable names
              >>> r.varNames() #doctest: +ELLIPSIS
              [u'PID.I.y_start', u'PID.Td', u'PID.I.der(y)', ...]
              >>> # Return ['const.k', 'const.y']
              >>> r.varNames('const')
              [u'const.k', u'const.y']
              >>> # Returns all variables whose last character is u
              >>> r.varNames('u$')
              [u'PID.gainPID.u', u'PID.limiter.u', u'PID.gainTrack.u', u'PID.P.u', u'PID.I.u', u'gain.u']

        '''
        return self.names(pattern, re=True)
    # TODO: Consider eliminating this function and using SimRes.names()
    # directly. 

    def integral(self, varName):
        '''Get the integral of the data series.

        :param varName: The name of the variable.
        :return: The integral of ``varName``.

        This function returns :math:`\int_{t_0}^{t_1} x(s) \, ds`, where
        :math:`t_0` is the start time and :math:`t_1` the final time of the data
        series :math:`x(\cdot)`, and :math:`x(\cdot)` are the data values
        of the variable ``varName``.

        Usage: Type
           >>> import os
           >>> from buildingspy.io.outputfile import Reader
           >>> resultFile = os.path.join("buildingspy", "examples", "dymola", "PlotDemo.mat")
           >>> r=Reader(resultFile, "dymola")
           >>> r.integral('preHea.port.Q_flow')
           -21.589193
        '''
        integral = lambda name: trapz(self.get_values(name), self.get_times(name))
        return self._get(varName, integral)

    # Aliases:
    min = lambda name: self[name].min()
    max = lambda name: self[name].max()
    mean = lambda name: self[name].mean()
    values = lambda name: self[name].array()
    # TODO: Consider eliminating these and using the SimRes methods directly.
